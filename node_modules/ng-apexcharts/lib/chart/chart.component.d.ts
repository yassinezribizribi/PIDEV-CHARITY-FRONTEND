import { OnChanges, OnDestroy, SimpleChanges } from "@angular/core";
import { ApexAnnotations, ApexAxisChartSeries, ApexChart, ApexDataLabels, ApexFill, ApexForecastDataPoints, ApexGrid, ApexLegend, ApexMarkers, ApexNoData, ApexNonAxisChartSeries, ApexPlotOptions, ApexResponsive, ApexStates, ApexStroke, ApexTheme, ApexTitleSubtitle, ApexTooltip, ApexXAxis, ApexYAxis } from "../model/apex-types";
import * as i0 from "@angular/core";
type ApexCharts = import("apexcharts");
declare global {
    interface Window {
        ApexCharts: typeof ApexCharts;
    }
}
export declare class ChartComponent implements OnChanges, OnDestroy {
    readonly chart: import("@angular/core").InputSignal<ApexChart>;
    readonly annotations: import("@angular/core").InputSignal<ApexAnnotations>;
    readonly colors: import("@angular/core").InputSignal<any[]>;
    readonly dataLabels: import("@angular/core").InputSignal<ApexDataLabels>;
    readonly series: import("@angular/core").InputSignal<ApexAxisChartSeries | ApexNonAxisChartSeries>;
    readonly stroke: import("@angular/core").InputSignal<ApexStroke>;
    readonly labels: import("@angular/core").InputSignal<string[]>;
    readonly legend: import("@angular/core").InputSignal<ApexLegend>;
    readonly markers: import("@angular/core").InputSignal<ApexMarkers>;
    readonly noData: import("@angular/core").InputSignal<ApexNoData>;
    readonly fill: import("@angular/core").InputSignal<ApexFill>;
    readonly tooltip: import("@angular/core").InputSignal<ApexTooltip>;
    readonly plotOptions: import("@angular/core").InputSignal<ApexPlotOptions>;
    readonly responsive: import("@angular/core").InputSignal<ApexResponsive[]>;
    readonly xaxis: import("@angular/core").InputSignal<ApexXAxis>;
    readonly yaxis: import("@angular/core").InputSignal<ApexYAxis | ApexYAxis[]>;
    readonly forecastDataPoints: import("@angular/core").InputSignal<ApexForecastDataPoints>;
    readonly grid: import("@angular/core").InputSignal<ApexGrid>;
    readonly states: import("@angular/core").InputSignal<ApexStates>;
    readonly title: import("@angular/core").InputSignal<ApexTitleSubtitle>;
    readonly subtitle: import("@angular/core").InputSignal<ApexTitleSubtitle>;
    readonly theme: import("@angular/core").InputSignal<ApexTheme>;
    readonly autoUpdateSeries: import("@angular/core").InputSignal<boolean>;
    readonly chartReady: import("@angular/core").OutputEmitterRef<{
        chartObj: ApexCharts;
    }>;
    readonly chartInstance: import("@angular/core").WritableSignal<globalThis.ApexCharts>;
    private readonly chartElement;
    private ngZone;
    private isBrowser;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private hydrate;
    private createElement;
    render(): Promise<void>;
    updateOptions(options: any, redrawPaths?: boolean, animate?: boolean, updateSyncedCharts?: boolean): Promise<void>;
    updateSeries(newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries, animate?: boolean): Promise<void>;
    appendSeries(newSeries: ApexAxisChartSeries | ApexNonAxisChartSeries, animate?: boolean): void;
    appendData(newData: any[]): void;
    highlightSeries(seriesName: string): any;
    toggleSeries(seriesName: string): any;
    showSeries(seriesName: string): void;
    hideSeries(seriesName: string): void;
    resetSeries(): void;
    zoomX(min: number, max: number): void;
    toggleDataPointSelection(seriesIndex: number, dataPointIndex?: number): void;
    destroy(): void;
    setLocale(localeName: string): void;
    paper(): void;
    addXaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    addYaxisAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    addPointAnnotation(options: any, pushToMemory?: boolean, context?: any): void;
    removeAnnotation(id: string, options?: any): void;
    clearAnnotations(options?: any): void;
    dataURI(options?: any): Promise<{
        imgURI: string;
    } | {
        blob: Blob;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChartComponent, "apx-chart", never, { "chart": { "alias": "chart"; "required": false; "isSignal": true; }; "annotations": { "alias": "annotations"; "required": false; "isSignal": true; }; "colors": { "alias": "colors"; "required": false; "isSignal": true; }; "dataLabels": { "alias": "dataLabels"; "required": false; "isSignal": true; }; "series": { "alias": "series"; "required": false; "isSignal": true; }; "stroke": { "alias": "stroke"; "required": false; "isSignal": true; }; "labels": { "alias": "labels"; "required": false; "isSignal": true; }; "legend": { "alias": "legend"; "required": false; "isSignal": true; }; "markers": { "alias": "markers"; "required": false; "isSignal": true; }; "noData": { "alias": "noData"; "required": false; "isSignal": true; }; "fill": { "alias": "fill"; "required": false; "isSignal": true; }; "tooltip": { "alias": "tooltip"; "required": false; "isSignal": true; }; "plotOptions": { "alias": "plotOptions"; "required": false; "isSignal": true; }; "responsive": { "alias": "responsive"; "required": false; "isSignal": true; }; "xaxis": { "alias": "xaxis"; "required": false; "isSignal": true; }; "yaxis": { "alias": "yaxis"; "required": false; "isSignal": true; }; "forecastDataPoints": { "alias": "forecastDataPoints"; "required": false; "isSignal": true; }; "grid": { "alias": "grid"; "required": false; "isSignal": true; }; "states": { "alias": "states"; "required": false; "isSignal": true; }; "title": { "alias": "title"; "required": false; "isSignal": true; }; "subtitle": { "alias": "subtitle"; "required": false; "isSignal": true; }; "theme": { "alias": "theme"; "required": false; "isSignal": true; }; "autoUpdateSeries": { "alias": "autoUpdateSeries"; "required": false; "isSignal": true; }; }, { "chartReady": "chartReady"; }, never, never, true, never>;
}
export {};
