import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, inject, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, NgModule } from '@angular/core';
import { SharedModule } from 'primeng/api';
import * as i1 from 'primeng/badge';
import { BadgeModule } from 'primeng/badge';
import { BaseComponent } from 'primeng/basecomponent';
import { BaseStyle } from 'primeng/base';

const theme = ({ dt }) => `
.p-overlaybadge {
    position: relative;
}

.p-overlaybadge .p-badge {
    position: absolute;
    top: 0;
    right: 0;
    transform: translate(50%, -50%);
    transform-origin: 100% 0;
    margin: 0;
    outline-width: ${dt('overlaybadge.outline.width')};
    outline-style: solid;
    outline-color: ${dt('overlaybadge.outline.color')};
}
`;
const classes = {
    root: 'p-overlaybadge'
};
class OverlayBadgeStyle extends BaseStyle {
    name = 'overlaybadge';
    theme = theme;
    classes = classes;
    static ɵfac = /*@__PURE__*/ (() => { let ɵOverlayBadgeStyle_BaseFactory; return function OverlayBadgeStyle_Factory(__ngFactoryType__) { return (ɵOverlayBadgeStyle_BaseFactory || (ɵOverlayBadgeStyle_BaseFactory = i0.ɵɵgetInheritedFactory(OverlayBadgeStyle)))(__ngFactoryType__ || OverlayBadgeStyle); }; })();
    static ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OverlayBadgeStyle, factory: OverlayBadgeStyle.ɵfac });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OverlayBadgeStyle, [{
        type: Injectable
    }], null, null); })();

const _c0 = ["*"];
/**
 * OverlayPanel is a container component positioned as connected to its target.
 * @group Components
 */
class OverlayBadge extends BaseComponent {
    /**
     * Class of the element.
     * @group Props
     */
    styleClass;
    /**
     * Inline style of the element.
     * @group Props
     */
    style;
    /**
     * Size of the badge, valid options are "large" and "xlarge".
     * @group Props
     */
    badgeSize;
    /**
     * Severity type of the badge.
     * @group Props
     */
    severity;
    /**
     * Value to display inside the badge.
     * @group Props
     */
    value;
    /**
     * When specified, disables the component.
     * @group Props
     */
    badgeDisabled = false;
    /**
     * Size of the badge, valid options are "large" and "xlarge".
     * @group Props
     * @deprecated use badgeSize instead.
     */
    set size(value) {
        this._size = value;
        !this.badgeSize && this.size && console.log('size property is deprecated and will removed in v18, use badgeSize instead.');
    }
    get size() {
        return this._size;
    }
    _size;
    _componentStyle = inject(OverlayBadgeStyle);
    constructor() {
        super();
    }
    static ɵfac = function OverlayBadge_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || OverlayBadge)(); };
    static ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: OverlayBadge, selectors: [["p-overlayBadge"], ["p-overlay-badge"], ["p-overlaybadge"]], inputs: { styleClass: "styleClass", style: "style", badgeSize: "badgeSize", severity: "severity", value: "value", badgeDisabled: [2, "badgeDisabled", "badgeDisabled", booleanAttribute], size: "size" }, features: [i0.ɵɵProvidersFeature([OverlayBadgeStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 3, vars: 7, consts: [[1, "p-overlaybadge"], [3, "styleClass", "badgeSize", "severity", "value", "badgeDisabled"]], template: function OverlayBadge_Template(rf, ctx) { if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵelementStart(0, "div", 0);
            i0.ɵɵprojection(1);
            i0.ɵɵelement(2, "p-badge", 1);
            i0.ɵɵelementEnd();
        } if (rf & 2) {
            i0.ɵɵadvance(2);
            i0.ɵɵstyleMap(ctx.style);
            i0.ɵɵproperty("styleClass", ctx.styleClass)("badgeSize", ctx.badgeSize)("severity", ctx.severity)("value", ctx.value)("badgeDisabled", ctx.badgeDisabled);
        } }, dependencies: [CommonModule, BadgeModule, i1.Badge, SharedModule], encapsulation: 2, changeDetection: 0 });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OverlayBadge, [{
        type: Component,
        args: [{
                selector: 'p-overlayBadge, p-overlay-badge, p-overlaybadge',
                standalone: true,
                imports: [CommonModule, BadgeModule, SharedModule],
                template: `
        <div class="p-overlaybadge">
            <ng-content></ng-content>
            <p-badge [styleClass]="styleClass" [style]="style" [badgeSize]="badgeSize" [severity]="severity" [value]="value" [badgeDisabled]="badgeDisabled" />
        </div>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                providers: [OverlayBadgeStyle]
            }]
    }], () => [], { styleClass: [{
            type: Input
        }], style: [{
            type: Input
        }], badgeSize: [{
            type: Input
        }], severity: [{
            type: Input
        }], value: [{
            type: Input
        }], badgeDisabled: [{
            type: Input,
            args: [{ transform: booleanAttribute }]
        }], size: [{
            type: Input
        }] }); })();
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassDebugInfo(OverlayBadge, { className: "OverlayBadge", filePath: "overlaybadge.ts", lineNumber: 26 }); })();
class OverlayBadgeModule {
    static ɵfac = function OverlayBadgeModule_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || OverlayBadgeModule)(); };
    static ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: OverlayBadgeModule });
    static ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [OverlayBadge, SharedModule, SharedModule] });
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(OverlayBadgeModule, [{
        type: NgModule,
        args: [{
                imports: [OverlayBadge, SharedModule],
                exports: [OverlayBadge, SharedModule]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(OverlayBadgeModule, { imports: [OverlayBadge, SharedModule], exports: [OverlayBadge, SharedModule] }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { OverlayBadge, OverlayBadgeModule, OverlayBadgeStyle };
//# sourceMappingURL=primeng-overlaybadge.mjs.map
