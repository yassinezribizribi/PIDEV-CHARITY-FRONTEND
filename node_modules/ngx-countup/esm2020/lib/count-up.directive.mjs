import { Directive, Input, Output, HostListener, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';
import { CountUp } from 'countup.js';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
export class CountUpDirective {
    constructor(el, zone, platformId) {
        this.el = el;
        this.zone = zone;
        this.platformId = platformId;
        this.options = {};
        this.reanimateOnClick = true;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.complete = new EventEmitter();
    }
    // Re-animate if preference is set.
    onClick() {
        if (this.reanimateOnClick) {
            this.animate();
        }
    }
    ngOnChanges(changes) {
        // don't animate server-side (universal)
        if (!isPlatformBrowser(this.platformId)) {
            return;
        }
        const { options, endVal } = changes;
        if (this.countUp) {
            if (options?.currentValue !== undefined || endVal?.currentValue !== undefined) {
                // If options have changed, reinitialize
                if (options?.currentValue !== undefined) {
                    this.initAndRun();
                }
                else {
                    // Only endVal has changed, update with current options
                    if (!this.options.startVal) {
                        this.options.startVal = this.countUp.frameVal;
                    }
                    this.zone.runOutsideAngular(() => {
                        this.countUp.update(this.endVal);
                    });
                }
            }
        }
        else {
            this.initAndRun();
        }
    }
    animate() {
        this.zone.runOutsideAngular(() => {
            this.countUp.reset();
            this.countUp.start(() => {
                this.zone.run(() => {
                    this.complete.emit();
                });
            });
        });
    }
    initAndRun() {
        this.zone.runOutsideAngular(() => {
            this.countUp = new CountUp(this.el.nativeElement, this.endVal, this.options);
            if (!this.options.enableScrollSpy) {
                this.animate();
            }
        });
    }
}
CountUpDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: CountUpDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Directive });
CountUpDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.4.0", type: CountUpDirective, selector: "[countUp]", inputs: { endVal: ["countUp", "endVal"], options: "options", reanimateOnClick: "reanimateOnClick" }, outputs: { complete: "complete" }, host: { listeners: { "click": "onClick()" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.4.0", ngImport: i0, type: CountUpDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[countUp]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { endVal: [{
                type: Input,
                args: ['countUp']
            }], options: [{
                type: Input
            }], reanimateOnClick: [{
                type: Input
            }], complete: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnQtdXAuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY291bnQtdXAvc3JjL2xpYi9jb3VudC11cC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCxLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixZQUFZLEVBR0osTUFBTSxFQUFFLFdBQVcsRUFDNUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBa0IsTUFBTSxZQUFZLENBQUM7QUFDckQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUJBQWlCLENBQUM7O0FBS2xELE1BQU0sT0FBTyxnQkFBZ0I7SUFtQjNCLFlBQ1UsRUFBYyxFQUNkLElBQVksRUFDUyxVQUFrQjtRQUZ2QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNTLGVBQVUsR0FBVixVQUFVLENBQVE7UUFoQnhDLFlBQU8sR0FBbUIsRUFBRSxDQUFDO1FBQzdCLHFCQUFnQixHQUFHLElBQUksQ0FBQztRQUNqQyw0REFBNEQ7UUFDbEQsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFRLENBQUM7SUFjM0MsQ0FBQztJQVpKLG1DQUFtQztJQUVuQyxPQUFPO1FBQ0wsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO0lBQ0gsQ0FBQztJQVFELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2QyxPQUFPO1NBQ1I7UUFFRCxNQUFNLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxPQUFPLEVBQUUsWUFBWSxLQUFLLFNBQVMsSUFBSSxNQUFNLEVBQUUsWUFBWSxLQUFLLFNBQVMsRUFBRTtnQkFDN0Usd0NBQXdDO2dCQUN4QyxJQUFJLE9BQU8sRUFBRSxZQUFZLEtBQUssU0FBUyxFQUFFO29CQUN2QyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7aUJBQ25CO3FCQUFNO29CQUNMLHVEQUF1RDtvQkFDdkQsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO3dCQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztxQkFDL0M7b0JBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7d0JBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztvQkFDbkMsQ0FBQyxDQUFDLENBQUM7aUJBQ0o7YUFDRjtTQUNGO2FBQU07WUFDTCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBQ0QsT0FBTztRQUNMLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO2dCQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUU7b0JBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxVQUFVO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFO2dCQUNqQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDaEI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7OzZHQXRFVSxnQkFBZ0Isa0VBc0JqQixXQUFXO2lHQXRCVixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFINUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztpQkFDdEI7d0dBdUI0QyxNQUFNOzBCQUE5QyxNQUFNOzJCQUFDLFdBQVc7NENBbEJILE1BQU07c0JBQXZCLEtBQUs7dUJBQUMsU0FBUztnQkFFUCxPQUFPO3NCQUFmLEtBQUs7Z0JBQ0csZ0JBQWdCO3NCQUF4QixLQUFLO2dCQUVJLFFBQVE7c0JBQWpCLE1BQU07Z0JBSVAsT0FBTztzQkFETixZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEhvc3RMaXN0ZW5lcixcbiAgRXZlbnRFbWl0dGVyLFxuICBPbkNoYW5nZXMsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIE5nWm9uZSwgSW5qZWN0LCBQTEFURk9STV9JRFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvdW50VXAsIENvdW50VXBPcHRpb25zIH0gZnJvbSAnY291bnR1cC5qcyc7XG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY291bnRVcF0nXG59KVxuZXhwb3J0IGNsYXNzIENvdW50VXBEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuXG4gIGNvdW50VXA6IENvdW50VXA7XG4gIC8vIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBjb3VudCB0b1xuICBASW5wdXQoJ2NvdW50VXAnKSBlbmRWYWw6IG51bWJlcjtcblxuICBASW5wdXQoKSBvcHRpb25zOiBDb3VudFVwT3B0aW9ucyA9IHt9O1xuICBASW5wdXQoKSByZWFuaW1hdGVPbkNsaWNrID0gdHJ1ZTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtbmF0aXZlXG4gIEBPdXRwdXQoKSBjb21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAvLyBSZS1hbmltYXRlIGlmIHByZWZlcmVuY2UgaXMgc2V0LlxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIG9uQ2xpY2soKSB7XG4gICAgaWYgKHRoaXMucmVhbmltYXRlT25DbGljaykge1xuICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIHpvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgKSB7fVxuICBcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIC8vIGRvbid0IGFuaW1hdGUgc2VydmVyLXNpZGUgKHVuaXZlcnNhbClcbiAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIFxuICAgIGNvbnN0IHsgb3B0aW9ucywgZW5kVmFsIH0gPSBjaGFuZ2VzO1xuICBcbiAgICBpZiAodGhpcy5jb3VudFVwKSB7XG4gICAgICBpZiAob3B0aW9ucz8uY3VycmVudFZhbHVlICE9PSB1bmRlZmluZWQgfHwgZW5kVmFsPy5jdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBJZiBvcHRpb25zIGhhdmUgY2hhbmdlZCwgcmVpbml0aWFsaXplXG4gICAgICAgIGlmIChvcHRpb25zPy5jdXJyZW50VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMuaW5pdEFuZFJ1bigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE9ubHkgZW5kVmFsIGhhcyBjaGFuZ2VkLCB1cGRhdGUgd2l0aCBjdXJyZW50IG9wdGlvbnNcbiAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zdGFydFZhbCkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnN0YXJ0VmFsID0gdGhpcy5jb3VudFVwLmZyYW1lVmFsO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jb3VudFVwLnVwZGF0ZSh0aGlzLmVuZFZhbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0QW5kUnVuKCk7XG4gICAgfVxuICB9XG4gIGFuaW1hdGUoKTogdm9pZCB7XG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuY291bnRVcC5yZXNldCgpO1xuICAgICAgdGhpcy5jb3VudFVwLnN0YXJ0KCgpID0+IHtcbiAgICAgICAgdGhpcy56b25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZS5lbWl0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRBbmRSdW4oKTogdm9pZCB7XG4gICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuY291bnRVcCA9IG5ldyBDb3VudFVwKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy5lbmRWYWwsIHRoaXMub3B0aW9ucyk7XG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5lbmFibGVTY3JvbGxTcHkpIHtcbiAgICAgICAgdGhpcy5hbmltYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==